#include <list>
#include <string>
#include <vector>

using namespace std;

class Solution
{
 public:
  string simplifyPath(string path)
  {
    //vector<string::value_type> buffer_1;
    //list<decltype(buffer_1)> buffer_2;
    list<list<string::value_type>> buffer;
    auto curr_buffer_seg = buffer.begin();
    
    for(const auto ele : path)
      {
	if(ele == '/')
	  {
	    buffer.emplace_back();
	    curr_buffer_seg = --buffer.end();
	  }
	  
	else
	  curr_buffer_seg->push_back(ele);
      }
    
    for(const auto& ele_1 : buffer)
      {
	for(const auto ele_2 : ele_1)
	  cout << ele_2;
	cout << "/";
      }
    cout << endl;

    //Shrink list
    const decltype(buffer)::value_type hold_pattern = {'.'};
    const decltype(buffer)::value_type back_pattern = {'.', '.'};

    auto buffer_it = buffer.begin();
    while(buffer_it != buffer.end())
      {
	if(*buffer_it == hold_pattern || buffer_it->empty())
	  buffer_it = buffer.erase(buffer_it);
	
	else if(*buffer_it == back_pattern)
	  {
	    buffer_it  = buffer.erase(buffer_it);
	    if(!(buffer_it == buffer.begin()))
	      buffer_it = buffer.erase(--buffer_it);
	  }

	else
	  buffer_it++;
      }

    for(const auto& ele_1 : buffer)
      {
	for(const auto ele_2 : ele_1)
	  cout << ele_2;
	cout << " ";
      }
    cout << endl;

    size_t result_length = 0;
    for(const auto & ele : buffer)
      result_length += ele.size() + 1;
    cout << "result_length = " << result_length << endl;
    
    string result(result_length);
    size_t index = 0;
    for(const auto& ele_1 : buffer)
      {
	result[index] = '/';
	index++;
	for(const auto ele_2 : ele_1)
	  {
	    result[index] = ele_2;
	    index++;
	  }
      }      
    return result;
  }
};
